@startuml ContainerDiagram
!include <C4/C4_Container>


!include <logos/docker>
!include <logos/react>
!include <logos/nodejs>
!include <logos/python>
!include <logos/mongodb>
!include <logos/rabbitmq>
!include <logos/elasticsearch>
!include <logos/redis>
!include <logos/apache>
!include <logos/prometheus>
!include <logos/grafana>

!include <office/Concepts/email>
!include <office/Servers/reverse_proxy>

title Loom - Container Diagram

!pragma layout elk
skinparam ranksep 50
skinparam nodesep 50

AddElementTag("exposed", $legendText="External Exposed Service", $shadowing="true", $bgColor="#b35806", $borderColor="#d73027")

System_Boundary(loom, "") {

    'System_Boundary(frontend_services, "Frontend Services"){
        Container(frontend, "Frontend", "React, Material UI, Redux", "User interaction", $sprite="react", $tags="exposed")
        Container(translate, "Translate", "LibeTranslate", "Translation", $sprite="&text,scale=5", $tags="exposed")
        Container(ai_ui, "AI User Interface", "Open Webui", "User Interaction with AI", $sprite="robot", $tags="exposed")
        Container(email_client, "Email Client", "Roundcube", "Visualizes Emails", $sprite="email", $tags="exposed")

        ContainerDb(minio, "File Upload", "Minio", "Raw Data Intake", $tags="exposed")

        Container(api, "API", "Python FastAPI", "REST-API", $sprite="python", $tags="exposed")
    '}

    'System_Boundary(backend_services, "Backend Services"){
        Container(crawler, "Crawler", "Python", "Crawls Raw Data and Schedules Tasks", $sprite="python")
        Container(beat, "Beat", "Python", "Schedules Periodic Tasks", $sprite="&clock,scale=5")

        Container(worker, "Worker", "Python Celery", "Processes Tasks", $sprite="python")

        Container(imap, "Imap Server", "Dovecot", "Stores Email", $sprite="email", $tags="exposed")

        Container(rspamd, "Rspamd", "Spam Filter", "Detect SPAM", $sprite="email", $tags="exposed")

        ContainerQueue(rabbit, "Message Queue", "Rabbit MQ", "Task Queue", $sprite="rabbitmq", $tags="exposed")
        ContainerDb(redis, "Cache", "Redis", "Stores: Cache, Celery Synchroization", $sprite="redis")
        ContainerDb(mongo, "File Storage", "mongoDB", "Stores: Raw Data, Task Metadata", $sprite="mongodb")
        ContainerDb(es, "Database", "Elasticsearch", "Stores: Analyzed Data, Logs", $sprite="elasticsearch", $tags="exposed")
        Container(tika, "Content Extraction", "Tika", "Analyzes files", $sprite="apache", $tags="exposed")
        Container(ai, "AI Server", "Ollama", "Provides AI Services", $sprite="robot", $tags="exposed")

        Container(fluentd, "Fluentd", "Fluentd", "Collects Logs", $sprite="docker")
        Container(prometheus, "Prometheus", "prometheus", "Collect System Statistics", $sprite="prometheus", $tags="exposed")

        Container(flower, "Flower", "Celery Flower", "Visualizes Tasks", $sprite="&task,scale=5", $tags="exposed")

        Container(elasticvue, "Elasticvue", "Elasticvue", "Elasticsearch GUI", $sprite="elasticsearch", $tags="exposed")
        Container(mongoexpress, "Mongo Express", "Mongo Express", "MongoDB GUI", $sprite="mongodb", $tags="exposed")
        Container(rediswebui, "Redis Web UI", "Redis Web UI", "GUI for Redis", $sprite="redis", $tags="exposed")

        Container(grafana, "Grafana", "grafana", "Visualizes: Logs, System, Queues", $sprite="grafana", $tags="exposed")

        Container(traefik, "Traefik", "Traefik", "Reverse Proxy, TLS", $sprite="reverse_proxy", $tags="exposed")
    '}
}

Rel(minio, crawler, "")

Rel(api, mongo, "")
Rel(api, rabbit, "")
Rel(api, es, "")
Rel(api, translate, "")

Rel(crawler, mongo, "")
Rel(crawler, rabbit, "")

Rel(ai_ui, ai, "")

Rel(imap, email_client, "")

Rel(rabbit, worker, "")

Rel(beat, rabbit, "")

Rel(worker, flower, "")
Rel(worker, redis, "")
Rel(worker, mongo, "")
Rel(worker, es, "")
Rel(worker, tika, "")
Rel(worker, ai, "")
Rel(worker, translate, "")
Rel(worker, imap, "")
Rel(worker, rspamd, "")

Rel(mongoexpress, mongo, "")
Rel(elasticvue, es, "")
Rel(rediswebui, redis, "")
Rel(fluentd, es, "")

Rel(prometheus, grafana, "")
Rel(es, grafana, "Logs")
Rel(rabbit, prometheus, "")

SHOW_LEGEND(true)

@enduml