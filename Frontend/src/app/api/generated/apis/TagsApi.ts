/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Loom API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { AddTagRequest, HTTPValidationError } from "../models/index";
import {
    AddTagRequestFromJSON,
    AddTagRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from "../models/index";

export interface AddTagsV1FilesTagsPostRequest {
    addTagRequest: AddTagRequest;
}

export interface DeleteTagV1FilesTagsTagToDeleteDeleteRequest {
    tagToDelete: string;
}

/**
 *
 */
export class TagsApi extends runtime.BaseAPI {
    /**
     * Add Tags
     */
    async addTagsV1FilesTagsPostRaw(
        requestParameters: AddTagsV1FilesTagsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters["addTagRequest"] == null) {
            throw new runtime.RequiredError(
                "addTagRequest",
                'Required parameter "addTagRequest" was null or undefined when calling addTagsV1FilesTagsPost().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/v1/files/tags/`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: AddTagRequestToJSON(requestParameters["addTagRequest"]),
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Add Tags
     */
    async addTagsV1FilesTagsPost(
        requestParameters: AddTagsV1FilesTagsPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.addTagsV1FilesTagsPostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Delete Tag
     */
    async deleteTagV1FilesTagsTagToDeleteDeleteRaw(
        requestParameters: DeleteTagV1FilesTagsTagToDeleteDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters["tagToDelete"] == null) {
            throw new runtime.RequiredError(
                "tagToDelete",
                'Required parameter "tagToDelete" was null or undefined when calling deleteTagV1FilesTagsTagToDeleteDelete().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/tags/{tag_to_delete}`.replace(
                    `{${"tag_to_delete"}}`,
                    encodeURIComponent(
                        String(requestParameters["tagToDelete"]),
                    ),
                ),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Tag
     */
    async deleteTagV1FilesTagsTagToDeleteDelete(
        requestParameters: DeleteTagV1FilesTagsTagToDeleteDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.deleteTagV1FilesTagsTagToDeleteDeleteRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Get all tags.
     * Get Tags
     */
    async getTagsV1FilesTagsGetRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/tags/`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all tags.
     * Get Tags
     */
    async getTagsV1FilesTagsGet(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<string>> {
        const response = await this.getTagsV1FilesTagsGetRaw(initOverrides);
        return await response.value();
    }
}
