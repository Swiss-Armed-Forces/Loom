/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Loom API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    ContextCreateResponse,
    HTTPValidationError,
    Languages,
} from "../models/index";
import {
    ContextCreateResponseFromJSON,
    ContextCreateResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LanguagesFromJSON,
    LanguagesToJSON,
} from "../models/index";

export interface CreateContextV1AiPostRequest {
    searchString?: string;
    languages?: Languages;
}

export interface ProcessQuestionV1AiContextIdProcessQuestionPostRequest {
    contextId: string;
    question: string;
}

/**
 *
 */
export class AiApi extends runtime.BaseAPI {
    /**
     * Create Context
     */
    async createContextV1AiPostRaw(
        requestParameters: CreateContextV1AiPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ContextCreateResponse>> {
        const queryParameters: any = {};

        if (requestParameters["searchString"] != null) {
            queryParameters["search_string"] =
                requestParameters["searchString"];
        }

        if (requestParameters["languages"] != null) {
            queryParameters["languages"] = requestParameters["languages"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/ai/`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ContextCreateResponseFromJSON(jsonValue),
        );
    }

    /**
     * Create Context
     */
    async createContextV1AiPost(
        requestParameters: CreateContextV1AiPostRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ContextCreateResponse> {
        const response = await this.createContextV1AiPostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Process Question
     */
    async processQuestionV1AiContextIdProcessQuestionPostRaw(
        requestParameters: ProcessQuestionV1AiContextIdProcessQuestionPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters["contextId"] == null) {
            throw new runtime.RequiredError(
                "contextId",
                'Required parameter "contextId" was null or undefined when calling processQuestionV1AiContextIdProcessQuestionPost().',
            );
        }

        if (requestParameters["question"] == null) {
            throw new runtime.RequiredError(
                "question",
                'Required parameter "question" was null or undefined when calling processQuestionV1AiContextIdProcessQuestionPost().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters["question"] != null) {
            queryParameters["question"] = requestParameters["question"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/ai/{context_id}/process_question`.replace(
                    `{${"context_id"}}`,
                    encodeURIComponent(String(requestParameters["contextId"])),
                ),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Process Question
     */
    async processQuestionV1AiContextIdProcessQuestionPost(
        requestParameters: ProcessQuestionV1AiContextIdProcessQuestionPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response =
            await this.processQuestionV1AiContextIdProcessQuestionPostRaw(
                requestParameters,
                initOverrides,
            );
        return await response.value();
    }
}
