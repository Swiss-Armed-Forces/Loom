/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Loom API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    FileUploadResponse,
    GenericStatisticsModel,
    GetFilePreviewResponse,
    GetFileResponse,
    GetFilesResponse,
    HTTPValidationError,
    Languages,
    SortId,
    Stat,
    SummarizeFileRequest,
    SummaryStatisticsModel,
    TranslateFileRequest,
    TreeNodeModel,
    UpdateFileRequest,
    UpdateFilesRequest,
} from "../models/index";
import {
    FileUploadResponseFromJSON,
    FileUploadResponseToJSON,
    GenericStatisticsModelFromJSON,
    GenericStatisticsModelToJSON,
    GetFilePreviewResponseFromJSON,
    GetFilePreviewResponseToJSON,
    GetFileResponseFromJSON,
    GetFileResponseToJSON,
    GetFilesResponseFromJSON,
    GetFilesResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LanguagesFromJSON,
    LanguagesToJSON,
    SortIdFromJSON,
    SortIdToJSON,
    StatFromJSON,
    StatToJSON,
    SummarizeFileRequestFromJSON,
    SummarizeFileRequestToJSON,
    SummaryStatisticsModelFromJSON,
    SummaryStatisticsModelToJSON,
    TranslateFileRequestFromJSON,
    TranslateFileRequestToJSON,
    TreeNodeModelFromJSON,
    TreeNodeModelToJSON,
    UpdateFileRequestFromJSON,
    UpdateFileRequestToJSON,
    UpdateFilesRequestFromJSON,
    UpdateFilesRequestToJSON,
} from "../models/index";

export interface AddTagV1FilesFileIdTagsTagToAddPostRequest {
    fileId: string;
    tagToAdd: string;
}

export interface DeleteTagV1FilesFileIdTagsTagToRemoveDeleteRequest {
    fileId: string;
    tagToRemove: string;
}

export interface DownloadFileV1FilesFileIdDownloadGetRequest {
    fileId: string;
}

export interface DownloadTextV1FilesFileIdTextGetRequest {
    fileId: string;
}

export interface GetFilePreviewV1FilesFileIdPreviewGetRequest {
    fileId: string;
    searchString?: string;
    languages?: Languages;
}

export interface GetFileV1FilesFileIdGetRequest {
    fileId: string;
    searchString?: string;
    languages?: Languages;
}

export interface GetFilesTreeV1FilesTreeGetRequest {
    searchString?: string;
    languages?: Languages;
    nodePath?: string;
}

export interface GetFilesV1FilesGetRequest {
    sortId?: SortId;
    pageSize?: number;
    sortByField?: string;
    sortDirection?: GetFilesV1FilesGetSortDirectionEnum;
    searchString?: string;
    languages?: Languages;
}

export interface GetGenericStatsV1FilesStatsGenericStatNameGetRequest {
    statName: Stat;
    searchString?: string;
    languages?: Languages;
}

export interface GetSummaryStatsV1FilesStatsSummaryGetRequest {
    searchString?: string;
    languages?: Languages;
}

export interface GetThumbnailV1FilesFileIdThumbnailGetRequest {
    fileId: string;
    preview?: boolean;
}

export interface IndexFileV1FilesFileIdIndexPostRequest {
    fileId: string;
}

export interface SummarizeFileV1FilesFileIdSummarizePostRequest {
    fileId: string;
    summarizeFileRequest: SummarizeFileRequest;
}

export interface TranslateFileV1FilesFileIdTranslatePostRequest {
    fileId: string;
    translateFileRequest: TranslateFileRequest;
}

export interface UpdateFileV1FilesFileIdPutRequest {
    fileId: string;
    updateFileRequest: UpdateFileRequest;
}

export interface UpdateFilesByQueryV1FilesPutRequest {
    updateFilesRequest: UpdateFilesRequest;
}

export interface UploadFileV1FilesPostRequest {
    file: Blob;
}

/**
 *
 */
export class FilesApi extends runtime.BaseAPI {
    /**
     * Add tag to file.
     * Add Tag
     */
    async addTagV1FilesFileIdTagsTagToAddPostRaw(
        requestParameters: AddTagV1FilesFileIdTagsTagToAddPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters["fileId"] == null) {
            throw new runtime.RequiredError(
                "fileId",
                'Required parameter "fileId" was null or undefined when calling addTagV1FilesFileIdTagsTagToAddPost().',
            );
        }

        if (requestParameters["tagToAdd"] == null) {
            throw new runtime.RequiredError(
                "tagToAdd",
                'Required parameter "tagToAdd" was null or undefined when calling addTagV1FilesFileIdTagsTagToAddPost().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/{file_id}/tags/{tag_to_add}`
                    .replace(
                        `{${"file_id"}}`,
                        encodeURIComponent(String(requestParameters["fileId"])),
                    )
                    .replace(
                        `{${"tag_to_add"}}`,
                        encodeURIComponent(
                            String(requestParameters["tagToAdd"]),
                        ),
                    ),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Add tag to file.
     * Add Tag
     */
    async addTagV1FilesFileIdTagsTagToAddPost(
        requestParameters: AddTagV1FilesFileIdTagsTagToAddPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.addTagV1FilesFileIdTagsTagToAddPostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Delete tag from file.
     * Delete Tag
     */
    async deleteTagV1FilesFileIdTagsTagToRemoveDeleteRaw(
        requestParameters: DeleteTagV1FilesFileIdTagsTagToRemoveDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters["fileId"] == null) {
            throw new runtime.RequiredError(
                "fileId",
                'Required parameter "fileId" was null or undefined when calling deleteTagV1FilesFileIdTagsTagToRemoveDelete().',
            );
        }

        if (requestParameters["tagToRemove"] == null) {
            throw new runtime.RequiredError(
                "tagToRemove",
                'Required parameter "tagToRemove" was null or undefined when calling deleteTagV1FilesFileIdTagsTagToRemoveDelete().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/{file_id}/tags/{tag_to_remove}`
                    .replace(
                        `{${"file_id"}}`,
                        encodeURIComponent(String(requestParameters["fileId"])),
                    )
                    .replace(
                        `{${"tag_to_remove"}}`,
                        encodeURIComponent(
                            String(requestParameters["tagToRemove"]),
                        ),
                    ),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete tag from file.
     * Delete Tag
     */
    async deleteTagV1FilesFileIdTagsTagToRemoveDelete(
        requestParameters: DeleteTagV1FilesFileIdTagsTagToRemoveDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response =
            await this.deleteTagV1FilesFileIdTagsTagToRemoveDeleteRaw(
                requestParameters,
                initOverrides,
            );
        return await response.value();
    }

    /**
     * Download file.
     * Download File
     */
    async downloadFileV1FilesFileIdDownloadGetRaw(
        requestParameters: DownloadFileV1FilesFileIdDownloadGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters["fileId"] == null) {
            throw new runtime.RequiredError(
                "fileId",
                'Required parameter "fileId" was null or undefined when calling downloadFileV1FilesFileIdDownloadGet().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/{file_id}/download`.replace(
                    `{${"file_id"}}`,
                    encodeURIComponent(String(requestParameters["fileId"])),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download file.
     * Download File
     */
    async downloadFileV1FilesFileIdDownloadGet(
        requestParameters: DownloadFileV1FilesFileIdDownloadGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.downloadFileV1FilesFileIdDownloadGetRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Download content of file as text.
     * Download Text
     */
    async downloadTextV1FilesFileIdTextGetRaw(
        requestParameters: DownloadTextV1FilesFileIdTextGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>> {
        if (requestParameters["fileId"] == null) {
            throw new runtime.RequiredError(
                "fileId",
                'Required parameter "fileId" was null or undefined when calling downloadTextV1FilesFileIdTextGet().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/{file_id}/text`.replace(
                    `{${"file_id"}}`,
                    encodeURIComponent(String(requestParameters["fileId"])),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Download content of file as text.
     * Download Text
     */
    async downloadTextV1FilesFileIdTextGet(
        requestParameters: DownloadTextV1FilesFileIdTextGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object> {
        const response = await this.downloadTextV1FilesFileIdTextGetRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Get preview data of file.
     * Get File Preview
     */
    async getFilePreviewV1FilesFileIdPreviewGetRaw(
        requestParameters: GetFilePreviewV1FilesFileIdPreviewGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetFilePreviewResponse>> {
        if (requestParameters["fileId"] == null) {
            throw new runtime.RequiredError(
                "fileId",
                'Required parameter "fileId" was null or undefined when calling getFilePreviewV1FilesFileIdPreviewGet().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters["searchString"] != null) {
            queryParameters["search_string"] =
                requestParameters["searchString"];
        }

        if (requestParameters["languages"] != null) {
            queryParameters["languages"] = requestParameters["languages"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/{file_id}/preview`.replace(
                    `{${"file_id"}}`,
                    encodeURIComponent(String(requestParameters["fileId"])),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            GetFilePreviewResponseFromJSON(jsonValue),
        );
    }

    /**
     * Get preview data of file.
     * Get File Preview
     */
    async getFilePreviewV1FilesFileIdPreviewGet(
        requestParameters: GetFilePreviewV1FilesFileIdPreviewGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetFilePreviewResponse> {
        const response = await this.getFilePreviewV1FilesFileIdPreviewGetRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Get file data of file file_id.
     * Get File
     */
    async getFileV1FilesFileIdGetRaw(
        requestParameters: GetFileV1FilesFileIdGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetFileResponse>> {
        if (requestParameters["fileId"] == null) {
            throw new runtime.RequiredError(
                "fileId",
                'Required parameter "fileId" was null or undefined when calling getFileV1FilesFileIdGet().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters["searchString"] != null) {
            queryParameters["search_string"] =
                requestParameters["searchString"];
        }

        if (requestParameters["languages"] != null) {
            queryParameters["languages"] = requestParameters["languages"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/{file_id}`.replace(
                    `{${"file_id"}}`,
                    encodeURIComponent(String(requestParameters["fileId"])),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            GetFileResponseFromJSON(jsonValue),
        );
    }

    /**
     * Get file data of file file_id.
     * Get File
     */
    async getFileV1FilesFileIdGet(
        requestParameters: GetFileV1FilesFileIdGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetFileResponse> {
        const response = await this.getFileV1FilesFileIdGetRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Get a node out of the tree of files non-recursively.
     * Get Files Tree
     */
    async getFilesTreeV1FilesTreeGetRaw(
        requestParameters: GetFilesTreeV1FilesTreeGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<TreeNodeModel>>> {
        const queryParameters: any = {};

        if (requestParameters["searchString"] != null) {
            queryParameters["search_string"] =
                requestParameters["searchString"];
        }

        if (requestParameters["languages"] != null) {
            queryParameters["languages"] = requestParameters["languages"];
        }

        if (requestParameters["nodePath"] != null) {
            queryParameters["node_path"] = requestParameters["nodePath"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/tree`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            jsonValue.map(TreeNodeModelFromJSON),
        );
    }

    /**
     * Get a node out of the tree of files non-recursively.
     * Get Files Tree
     */
    async getFilesTreeV1FilesTreeGet(
        requestParameters: GetFilesTreeV1FilesTreeGetRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<TreeNodeModel>> {
        const response = await this.getFilesTreeV1FilesTreeGetRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Get list of file_id.
     * Get Files
     */
    async getFilesV1FilesGetRaw(
        requestParameters: GetFilesV1FilesGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetFilesResponse>> {
        const queryParameters: any = {};

        if (requestParameters["sortId"] != null) {
            queryParameters["sort_id"] = requestParameters["sortId"];
        }

        if (requestParameters["pageSize"] != null) {
            queryParameters["page_size"] = requestParameters["pageSize"];
        }

        if (requestParameters["sortByField"] != null) {
            queryParameters["sort_by_field"] = requestParameters["sortByField"];
        }

        if (requestParameters["sortDirection"] != null) {
            queryParameters["sort_direction"] =
                requestParameters["sortDirection"];
        }

        if (requestParameters["searchString"] != null) {
            queryParameters["search_string"] =
                requestParameters["searchString"];
        }

        if (requestParameters["languages"] != null) {
            queryParameters["languages"] = requestParameters["languages"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            GetFilesResponseFromJSON(jsonValue),
        );
    }

    /**
     * Get list of file_id.
     * Get Files
     */
    async getFilesV1FilesGet(
        requestParameters: GetFilesV1FilesGetRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetFilesResponse> {
        const response = await this.getFilesV1FilesGetRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Get Generic Stats
     */
    async getGenericStatsV1FilesStatsGenericStatNameGetRaw(
        requestParameters: GetGenericStatsV1FilesStatsGenericStatNameGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GenericStatisticsModel>> {
        if (requestParameters["statName"] == null) {
            throw new runtime.RequiredError(
                "statName",
                'Required parameter "statName" was null or undefined when calling getGenericStatsV1FilesStatsGenericStatNameGet().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters["searchString"] != null) {
            queryParameters["search_string"] =
                requestParameters["searchString"];
        }

        if (requestParameters["languages"] != null) {
            queryParameters["languages"] = requestParameters["languages"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/stats/generic/{stat_name}`.replace(
                    `{${"stat_name"}}`,
                    encodeURIComponent(String(requestParameters["statName"])),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            GenericStatisticsModelFromJSON(jsonValue),
        );
    }

    /**
     * Get Generic Stats
     */
    async getGenericStatsV1FilesStatsGenericStatNameGet(
        requestParameters: GetGenericStatsV1FilesStatsGenericStatNameGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GenericStatisticsModel> {
        const response =
            await this.getGenericStatsV1FilesStatsGenericStatNameGetRaw(
                requestParameters,
                initOverrides,
            );
        return await response.value();
    }

    /**
     * Get statistics about the files found by the provided query.
     * Get Summary Stats
     */
    async getSummaryStatsV1FilesStatsSummaryGetRaw(
        requestParameters: GetSummaryStatsV1FilesStatsSummaryGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SummaryStatisticsModel>> {
        const queryParameters: any = {};

        if (requestParameters["searchString"] != null) {
            queryParameters["search_string"] =
                requestParameters["searchString"];
        }

        if (requestParameters["languages"] != null) {
            queryParameters["languages"] = requestParameters["languages"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/stats/summary`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            SummaryStatisticsModelFromJSON(jsonValue),
        );
    }

    /**
     * Get statistics about the files found by the provided query.
     * Get Summary Stats
     */
    async getSummaryStatsV1FilesStatsSummaryGet(
        requestParameters: GetSummaryStatsV1FilesStatsSummaryGetRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SummaryStatisticsModel> {
        const response = await this.getSummaryStatsV1FilesStatsSummaryGetRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Get thumbnail for the file.
     * Get Thumbnail
     */
    async getThumbnailV1FilesFileIdThumbnailGetRaw(
        requestParameters: GetThumbnailV1FilesFileIdThumbnailGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters["fileId"] == null) {
            throw new runtime.RequiredError(
                "fileId",
                'Required parameter "fileId" was null or undefined when calling getThumbnailV1FilesFileIdThumbnailGet().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters["preview"] != null) {
            queryParameters["preview"] = requestParameters["preview"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/{file_id}/thumbnail`.replace(
                    `{${"file_id"}}`,
                    encodeURIComponent(String(requestParameters["fileId"])),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get thumbnail for the file.
     * Get Thumbnail
     */
    async getThumbnailV1FilesFileIdThumbnailGet(
        requestParameters: GetThumbnailV1FilesFileIdThumbnailGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.getThumbnailV1FilesFileIdThumbnailGetRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Expose this constant for the frontend in case we need to change it.
     * Get Tree Max Element Count
     */
    async getTreeMaxElementCountV1FilesTreeMaxElementCountGetRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/tree/max_element_count`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Expose this constant for the frontend in case we need to change it.
     * Get Tree Max Element Count
     */
    async getTreeMaxElementCountV1FilesTreeMaxElementCountGet(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<number> {
        const response =
            await this.getTreeMaxElementCountV1FilesTreeMaxElementCountGetRaw(
                initOverrides,
            );
        return await response.value();
    }

    /**
     * Re-index file.
     * Index File
     */
    async indexFileV1FilesFileIdIndexPostRaw(
        requestParameters: IndexFileV1FilesFileIdIndexPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters["fileId"] == null) {
            throw new runtime.RequiredError(
                "fileId",
                'Required parameter "fileId" was null or undefined when calling indexFileV1FilesFileIdIndexPost().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/files/{file_id}/index`.replace(
                    `{${"file_id"}}`,
                    encodeURIComponent(String(requestParameters["fileId"])),
                ),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Re-index file.
     * Index File
     */
    async indexFileV1FilesFileIdIndexPost(
        requestParameters: IndexFileV1FilesFileIdIndexPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.indexFileV1FilesFileIdIndexPostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Summarize file.
     * Summarize File
     */
    async summarizeFileV1FilesFileIdSummarizePostRaw(
        requestParameters: SummarizeFileV1FilesFileIdSummarizePostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters["fileId"] == null) {
            throw new runtime.RequiredError(
                "fileId",
                'Required parameter "fileId" was null or undefined when calling summarizeFileV1FilesFileIdSummarizePost().',
            );
        }

        if (requestParameters["summarizeFileRequest"] == null) {
            throw new runtime.RequiredError(
                "summarizeFileRequest",
                'Required parameter "summarizeFileRequest" was null or undefined when calling summarizeFileV1FilesFileIdSummarizePost().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/v1/files/{file_id}/summarize`.replace(
                    `{${"file_id"}}`,
                    encodeURIComponent(String(requestParameters["fileId"])),
                ),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: SummarizeFileRequestToJSON(
                    requestParameters["summarizeFileRequest"],
                ),
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Summarize file.
     * Summarize File
     */
    async summarizeFileV1FilesFileIdSummarizePost(
        requestParameters: SummarizeFileV1FilesFileIdSummarizePostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.summarizeFileV1FilesFileIdSummarizePostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Translate File
     */
    async translateFileV1FilesFileIdTranslatePostRaw(
        requestParameters: TranslateFileV1FilesFileIdTranslatePostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters["fileId"] == null) {
            throw new runtime.RequiredError(
                "fileId",
                'Required parameter "fileId" was null or undefined when calling translateFileV1FilesFileIdTranslatePost().',
            );
        }

        if (requestParameters["translateFileRequest"] == null) {
            throw new runtime.RequiredError(
                "translateFileRequest",
                'Required parameter "translateFileRequest" was null or undefined when calling translateFileV1FilesFileIdTranslatePost().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/v1/files/{file_id}/translate`.replace(
                    `{${"file_id"}}`,
                    encodeURIComponent(String(requestParameters["fileId"])),
                ),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: TranslateFileRequestToJSON(
                    requestParameters["translateFileRequest"],
                ),
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Translate File
     */
    async translateFileV1FilesFileIdTranslatePost(
        requestParameters: TranslateFileV1FilesFileIdTranslatePostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.translateFileV1FilesFileIdTranslatePostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Update file.
     * Update File
     */
    async updateFileV1FilesFileIdPutRaw(
        requestParameters: UpdateFileV1FilesFileIdPutRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters["fileId"] == null) {
            throw new runtime.RequiredError(
                "fileId",
                'Required parameter "fileId" was null or undefined when calling updateFileV1FilesFileIdPut().',
            );
        }

        if (requestParameters["updateFileRequest"] == null) {
            throw new runtime.RequiredError(
                "updateFileRequest",
                'Required parameter "updateFileRequest" was null or undefined when calling updateFileV1FilesFileIdPut().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/v1/files/{file_id}`.replace(
                    `{${"file_id"}}`,
                    encodeURIComponent(String(requestParameters["fileId"])),
                ),
                method: "PUT",
                headers: headerParameters,
                query: queryParameters,
                body: UpdateFileRequestToJSON(
                    requestParameters["updateFileRequest"],
                ),
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update file.
     * Update File
     */
    async updateFileV1FilesFileIdPut(
        requestParameters: UpdateFileV1FilesFileIdPutRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.updateFileV1FilesFileIdPutRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Update file.
     * Update Files By Query
     */
    async updateFilesByQueryV1FilesPutRaw(
        requestParameters: UpdateFilesByQueryV1FilesPutRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters["updateFilesRequest"] == null) {
            throw new runtime.RequiredError(
                "updateFilesRequest",
                'Required parameter "updateFilesRequest" was null or undefined when calling updateFilesByQueryV1FilesPut().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/v1/files/`,
                method: "PUT",
                headers: headerParameters,
                query: queryParameters,
                body: UpdateFilesRequestToJSON(
                    requestParameters["updateFilesRequest"],
                ),
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update file.
     * Update Files By Query
     */
    async updateFilesByQueryV1FilesPut(
        requestParameters: UpdateFilesByQueryV1FilesPutRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.updateFilesByQueryV1FilesPutRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Upload new file that will be processed by Loom.
     * Upload File
     */
    async uploadFileV1FilesPostRaw(
        requestParameters: UploadFileV1FilesPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<FileUploadResponse>> {
        if (requestParameters["file"] == null) {
            throw new runtime.RequiredError(
                "file",
                'Required parameter "file" was null or undefined when calling uploadFileV1FilesPost().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: "multipart/form-data" },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters["file"] != null) {
            formParams.append("file", requestParameters["file"] as any);
        }

        const response = await this.request(
            {
                path: `/v1/files/`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            FileUploadResponseFromJSON(jsonValue),
        );
    }

    /**
     * Upload new file that will be processed by Loom.
     * Upload File
     */
    async uploadFileV1FilesPost(
        requestParameters: UploadFileV1FilesPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<FileUploadResponse> {
        const response = await this.uploadFileV1FilesPostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }
}

/**
 * @export
 */
export const GetFilesV1FilesGetSortDirectionEnum = {
    Asc: "asc",
    Desc: "desc",
} as const;
export type GetFilesV1FilesGetSortDirectionEnum =
    (typeof GetFilesV1FilesGetSortDirectionEnum)[keyof typeof GetFilesV1FilesGetSortDirectionEnum];
