/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Loom API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    HTTPValidationError,
    OverallQueuesStats,
    QueueName,
    ResponseGetCompletedEstimateV1QueuesQueueNameCompleteEstimateGet,
} from "../models/index";
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    OverallQueuesStatsFromJSON,
    OverallQueuesStatsToJSON,
    QueueNameFromJSON,
    QueueNameToJSON,
    ResponseGetCompletedEstimateV1QueuesQueueNameCompleteEstimateGetFromJSON,
    ResponseGetCompletedEstimateV1QueuesQueueNameCompleteEstimateGetToJSON,
} from "../models/index";

export interface GetCompletedEstimateV1QueuesQueueNameCompleteEstimateGetRequest {
    queueName: QueueName;
}

export interface GetMessageCountV1QueuesQueueNameMessageCountGetRequest {
    queueName: QueueName;
}

/**
 *
 */
export class QueuesApi extends runtime.BaseAPI {
    /**
     * Get Completed Estimate
     */
    async getCompletedEstimateV1QueuesQueueNameCompleteEstimateGetRaw(
        requestParameters: GetCompletedEstimateV1QueuesQueueNameCompleteEstimateGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<
        runtime.ApiResponse<ResponseGetCompletedEstimateV1QueuesQueueNameCompleteEstimateGet>
    > {
        if (requestParameters["queueName"] == null) {
            throw new runtime.RequiredError(
                "queueName",
                'Required parameter "queueName" was null or undefined when calling getCompletedEstimateV1QueuesQueueNameCompleteEstimateGet().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/queues/{queue_name}/complete_estimate`.replace(
                    `{${"queue_name"}}`,
                    encodeURIComponent(String(requestParameters["queueName"])),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ResponseGetCompletedEstimateV1QueuesQueueNameCompleteEstimateGetFromJSON(
                jsonValue,
            ),
        );
    }

    /**
     * Get Completed Estimate
     */
    async getCompletedEstimateV1QueuesQueueNameCompleteEstimateGet(
        requestParameters: GetCompletedEstimateV1QueuesQueueNameCompleteEstimateGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ResponseGetCompletedEstimateV1QueuesQueueNameCompleteEstimateGet> {
        const response =
            await this.getCompletedEstimateV1QueuesQueueNameCompleteEstimateGetRaw(
                requestParameters,
                initOverrides,
            );
        return await response.value();
    }

    /**
     * Get Message Count
     */
    async getMessageCountV1QueuesQueueNameMessageCountGetRaw(
        requestParameters: GetMessageCountV1QueuesQueueNameMessageCountGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<number>> {
        if (requestParameters["queueName"] == null) {
            throw new runtime.RequiredError(
                "queueName",
                'Required parameter "queueName" was null or undefined when calling getMessageCountV1QueuesQueueNameMessageCountGet().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/queues/{queue_name}/message_count`.replace(
                    `{${"queue_name"}}`,
                    encodeURIComponent(String(requestParameters["queueName"])),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Message Count
     */
    async getMessageCountV1QueuesQueueNameMessageCountGet(
        requestParameters: GetMessageCountV1QueuesQueueNameMessageCountGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<number> {
        const response =
            await this.getMessageCountV1QueuesQueueNameMessageCountGetRaw(
                requestParameters,
                initOverrides,
            );
        return await response.value();
    }

    /**
     * Get Overall Queue Stats
     */
    async getOverallQueueStatsV1QueuesGetRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OverallQueuesStats>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/queues/`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            OverallQueuesStatsFromJSON(jsonValue),
        );
    }

    /**
     * Get Overall Queue Stats
     */
    async getOverallQueueStatsV1QueuesGet(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OverallQueuesStats> {
        const response =
            await this.getOverallQueueStatsV1QueuesGetRaw(initOverrides);
        return await response.value();
    }
}
