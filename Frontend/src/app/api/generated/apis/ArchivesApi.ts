/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Loom API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    ArchiveCreatedResponse,
    ArchiveRequest,
    ArchivesModel,
    HTTPValidationError,
    UpdateArchiveModel,
} from "../models/index";
import {
    ArchiveCreatedResponseFromJSON,
    ArchiveCreatedResponseToJSON,
    ArchiveRequestFromJSON,
    ArchiveRequestToJSON,
    ArchivesModelFromJSON,
    ArchivesModelToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    UpdateArchiveModelFromJSON,
    UpdateArchiveModelToJSON,
} from "../models/index";

export interface CreateNewArchiveV1ArchivePostRequest {
    archiveRequest: ArchiveRequest;
}

export interface DownloadArchiveV1ArchiveArchiveIdGetRequest {
    archiveId: string;
    encrypted?: boolean;
}

export interface UpdateArchiveV1ArchiveArchiveIdPostRequest {
    archiveId: string;
    updateArchiveModel: UpdateArchiveModel;
}

/**
 *
 */
export class ArchivesApi extends runtime.BaseAPI {
    /**
     * Create a new archive containing all files that match the query.
     * Create New Archive
     */
    async createNewArchiveV1ArchivePostRaw(
        requestParameters: CreateNewArchiveV1ArchivePostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ArchiveCreatedResponse>> {
        if (requestParameters["archiveRequest"] == null) {
            throw new runtime.RequiredError(
                "archiveRequest",
                'Required parameter "archiveRequest" was null or undefined when calling createNewArchiveV1ArchivePost().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/v1/archive/`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ArchiveRequestToJSON(requestParameters["archiveRequest"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ArchiveCreatedResponseFromJSON(jsonValue),
        );
    }

    /**
     * Create a new archive containing all files that match the query.
     * Create New Archive
     */
    async createNewArchiveV1ArchivePost(
        requestParameters: CreateNewArchiveV1ArchivePostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ArchiveCreatedResponse> {
        const response = await this.createNewArchiveV1ArchivePostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Download an archive by id.
     * Download Archive
     */
    async downloadArchiveV1ArchiveArchiveIdGetRaw(
        requestParameters: DownloadArchiveV1ArchiveArchiveIdGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters["archiveId"] == null) {
            throw new runtime.RequiredError(
                "archiveId",
                'Required parameter "archiveId" was null or undefined when calling downloadArchiveV1ArchiveArchiveIdGet().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters["encrypted"] != null) {
            queryParameters["encrypted"] = requestParameters["encrypted"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/archive/{archive_id}`.replace(
                    `{${"archive_id"}}`,
                    encodeURIComponent(String(requestParameters["archiveId"])),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download an archive by id.
     * Download Archive
     */
    async downloadArchiveV1ArchiveArchiveIdGet(
        requestParameters: DownloadArchiveV1ArchiveArchiveIdGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.downloadArchiveV1ArchiveArchiveIdGetRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Get all archives.
     * Get All Archives
     */
    async getAllArchivesV1ArchiveGetRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ArchivesModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/v1/archive/`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ArchivesModelFromJSON(jsonValue),
        );
    }

    /**
     * Get all archives.
     * Get All Archives
     */
    async getAllArchivesV1ArchiveGet(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ArchivesModel> {
        const response =
            await this.getAllArchivesV1ArchiveGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update archive.
     * Update Archive
     */
    async updateArchiveV1ArchiveArchiveIdPostRaw(
        requestParameters: UpdateArchiveV1ArchiveArchiveIdPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters["archiveId"] == null) {
            throw new runtime.RequiredError(
                "archiveId",
                'Required parameter "archiveId" was null or undefined when calling updateArchiveV1ArchiveArchiveIdPost().',
            );
        }

        if (requestParameters["updateArchiveModel"] == null) {
            throw new runtime.RequiredError(
                "updateArchiveModel",
                'Required parameter "updateArchiveModel" was null or undefined when calling updateArchiveV1ArchiveArchiveIdPost().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/v1/archive/{archive_id}`.replace(
                    `{${"archive_id"}}`,
                    encodeURIComponent(String(requestParameters["archiveId"])),
                ),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: UpdateArchiveModelToJSON(
                    requestParameters["updateArchiveModel"],
                ),
            },
            initOverrides,
        );

        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update archive.
     * Update Archive
     */
    async updateArchiveV1ArchiveArchiveIdPost(
        requestParameters: UpdateArchiveV1ArchiveArchiveIdPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.updateArchiveV1ArchiveArchiveIdPostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }
}
