/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Loom API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { MessageChatBotCitation } from "./MessageChatBotCitation";
import {
    instanceOfMessageChatBotCitation,
    MessageChatBotCitationFromJSON,
    MessageChatBotCitationFromJSONTyped,
    MessageChatBotCitationToJSON,
} from "./MessageChatBotCitation";
import type { MessageChatBotToken } from "./MessageChatBotToken";
import {
    instanceOfMessageChatBotToken,
    MessageChatBotTokenFromJSON,
    MessageChatBotTokenFromJSONTyped,
    MessageChatBotTokenToJSON,
} from "./MessageChatBotToken";
import type { MessageError } from "./MessageError";
import {
    instanceOfMessageError,
    MessageErrorFromJSON,
    MessageErrorFromJSONTyped,
    MessageErrorToJSON,
} from "./MessageError";
import type { MessageFileSave } from "./MessageFileSave";
import {
    instanceOfMessageFileSave,
    MessageFileSaveFromJSON,
    MessageFileSaveFromJSONTyped,
    MessageFileSaveToJSON,
} from "./MessageFileSave";
import type { MessageFileUpdate } from "./MessageFileUpdate";
import {
    instanceOfMessageFileUpdate,
    MessageFileUpdateFromJSON,
    MessageFileUpdateFromJSONTyped,
    MessageFileUpdateToJSON,
} from "./MessageFileUpdate";
import type { MessageNoop } from "./MessageNoop";
import {
    instanceOfMessageNoop,
    MessageNoopFromJSON,
    MessageNoopFromJSONTyped,
    MessageNoopToJSON,
} from "./MessageNoop";
import type { MessageSubscribConfirmation } from "./MessageSubscribConfirmation";
import {
    instanceOfMessageSubscribConfirmation,
    MessageSubscribConfirmationFromJSON,
    MessageSubscribConfirmationFromJSONTyped,
    MessageSubscribConfirmationToJSON,
} from "./MessageSubscribConfirmation";
import type { MessageSubscribe } from "./MessageSubscribe";
import {
    instanceOfMessageSubscribe,
    MessageSubscribeFromJSON,
    MessageSubscribeFromJSONTyped,
    MessageSubscribeToJSON,
} from "./MessageSubscribe";
import type { MessageUnsubscribe } from "./MessageUnsubscribe";
import {
    instanceOfMessageUnsubscribe,
    MessageUnsubscribeFromJSON,
    MessageUnsubscribeFromJSONTyped,
    MessageUnsubscribeToJSON,
} from "./MessageUnsubscribe";
import type { MessageUnsubscribeConfirmation } from "./MessageUnsubscribeConfirmation";
import {
    instanceOfMessageUnsubscribeConfirmation,
    MessageUnsubscribeConfirmationFromJSON,
    MessageUnsubscribeConfirmationFromJSONTyped,
    MessageUnsubscribeConfirmationToJSON,
} from "./MessageUnsubscribeConfirmation";

/**
 * @type Message
 *
 * @export
 */
export type Message =
    | ({ type: "chatBotCitation" } & MessageChatBotCitation)
    | ({ type: "chatBotToken" } & MessageChatBotToken)
    | ({ type: "error" } & MessageError)
    | ({ type: "fileSave" } & MessageFileSave)
    | ({ type: "fileUpdate" } & MessageFileUpdate)
    | ({ type: "noop" } & MessageNoop)
    | ({ type: "subscribe" } & MessageSubscribe)
    | ({ type: "subscribeConfirmation" } & MessageSubscribConfirmation)
    | ({ type: "unsubscribe" } & MessageUnsubscribe)
    | ({ type: "unsubscribeConfirmation" } & MessageUnsubscribeConfirmation);

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean,
): Message {
    if (json == null) {
        return json;
    }
    switch (json["type"]) {
        case "chatBotCitation":
            return {
                ...MessageChatBotCitationFromJSONTyped(json, true),
                type: "chatBotCitation",
            };
        case "chatBotToken":
            return {
                ...MessageChatBotTokenFromJSONTyped(json, true),
                type: "chatBotToken",
            };
        case "error":
            return { ...MessageErrorFromJSONTyped(json, true), type: "error" };
        case "fileSave":
            return {
                ...MessageFileSaveFromJSONTyped(json, true),
                type: "fileSave",
            };
        case "fileUpdate":
            return {
                ...MessageFileUpdateFromJSONTyped(json, true),
                type: "fileUpdate",
            };
        case "noop":
            return { ...MessageNoopFromJSONTyped(json, true), type: "noop" };
        case "subscribe":
            return {
                ...MessageSubscribeFromJSONTyped(json, true),
                type: "subscribe",
            };
        case "subscribeConfirmation":
            return {
                ...MessageSubscribConfirmationFromJSONTyped(json, true),
                type: "subscribeConfirmation",
            };
        case "unsubscribe":
            return {
                ...MessageUnsubscribeFromJSONTyped(json, true),
                type: "unsubscribe",
            };
        case "unsubscribeConfirmation":
            return {
                ...MessageUnsubscribeConfirmationFromJSONTyped(json, true),
                type: "unsubscribeConfirmation",
            };
        default:
            throw new Error(
                `No variant of Message exists with 'type=${json["type"]}'`,
            );
    }
}

export function MessageToJSON(value?: Message | null): any {
    if (value == null) {
        return value;
    }
    switch (value["type"]) {
        case "chatBotCitation":
            return MessageChatBotCitationToJSON(value);
        case "chatBotToken":
            return MessageChatBotTokenToJSON(value);
        case "error":
            return MessageErrorToJSON(value);
        case "fileSave":
            return MessageFileSaveToJSON(value);
        case "fileUpdate":
            return MessageFileUpdateToJSON(value);
        case "noop":
            return MessageNoopToJSON(value);
        case "subscribe":
            return MessageSubscribeToJSON(value);
        case "subscribeConfirmation":
            return MessageSubscribConfirmationToJSON(value);
        case "unsubscribe":
            return MessageUnsubscribeToJSON(value);
        case "unsubscribeConfirmation":
            return MessageUnsubscribeConfirmationToJSON(value);
        default:
            throw new Error(
                `No variant of Message exists with 'type=${value["type"]}'`,
            );
    }
}
