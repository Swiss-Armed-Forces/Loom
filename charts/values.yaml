environment: production
nameOverride: null

domain: &default-domain loom

kubernetes:
  api: 192.168.49.2

image:
  registry: registry.gitlab.com
  pullPolicy: IfNotPresent

certificate:
  enabled: false
  issuerRef:
    name: null
  requireClientCert: false

ingress: &default-ingress-config
  enabled: true
  className: traefik
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
  tls:
    enabled: true

egress:
  enabled: false

pipeline:
  taskTimeLimitSeconds: 3600
  uploaded_files_time_before_hidden: null
  skip_summarize_while_indexing: false
  skip_translate_while_indexing: false
  automatic_indexing: true
  tika_ocr_languages:
    - eng
    - deu
    - fra

llm:
  model: qwen3:8b
  model_embedding: nomic-embed-text:v1.5
  model_tool: qwen3:8b
  temperature: null
  summarize_text_chunk_size: null
  summarize_text_chunk_overlap: null
  embedding_temperature: null
  embedding_text_chunk_size: null
  embedding_text_chunk_overlap: null
  llm_rerank_temperature: null

preInstall:
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/alpine
  resources:
    requests:
      cpu: "0.1"
      memory: "100Mi"
    limits:
      cpu: "0.2"
      memory: "200Mi"
  generateSecrets:
    - name: loom-minio-secret
      size: 40
      chars: "A-Za-z0-9"
      fixed: "0000000000000000000000000000000000000000"
    - name: archive-encryption-master-key
      size: 32
      chars: "a-f0-9"
      fixed: "00000000000000000000000000000000"

globalHttpRedirect:
  enabled: true
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/alpine
  service:
    port: 80
  resources:
    requests:
      cpu: "0.05"
      memory: "50Mi"
    limits:
      cpu: "0.1"
      memory: "100Mi"

api:
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/api
  service:
    port: 8084
  ingress: *default-ingress-config
  readinessProbe:
    enabled: true
  livenessProbe:
    enabled: true
  resources:
    requests:
      cpu: "0.2"
      memory: "200Mi"
    limits:
      cpu: "2"
      memory: "4Gi"
  initContainer:
    image:
      repository: swiss-armed-forces/cyber-command/cea/loom/alpine
    resources:
      requests:
        cpu: "0.05"
        memory: "50Mi"
      limits:
        cpu: "0.1"
        memory: "100Mi"

frontend:
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/frontend
  service:
    port: 80
  ingress: *default-ingress-config
  readinessProbe:
    enabled: false
  livenessProbe:
    enabled: true
  resources:
    requests:
      cpu: "0.1"
      memory: "100Mi"
    limits:
      cpu: "0.3"
      memory: "500Mi"

worker: &worker
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/worker
  hpa:
    enabled: true
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 100
    targetMemoryUtilizationPercentage: 100
  service:
    port: 80
  readinessProbe:
    enabled: true
  livenessProbe:
    enabled: true
  resources:
    requests:
      cpu: "0.3"
      memory: "500Mi"
    limits:
      cpu: "1.5"
      memory: "4Gi"

reaper: *worker

beat:
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/worker
  service:
    port: 80
  readinessProbe:
    enabled: false
  livenessProbe:
    enabled: true
  resources:
    requests:
      cpu: "0.1"
      memory: "200Mi"
    limits:
      cpu: "0.2"
      memory: "500Mi"

flower:
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/worker
  service:
    port: 5555
  ingress: *default-ingress-config
  readinessProbe:
    enabled: false
  livenessProbe:
    enabled: true
  resources:
    requests:
      cpu: "0.2"
      memory: "200Mi"
    limits:
      cpu: "1"
      memory: "1Gi"

crawler:
  enabled: true
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/crawler
  service:
    port: 80
  resources:
    requests:
      cpu: "0.2"
      memory: "200Mi"
    limits:
      cpu: "0.4"
      memory: "1Gi"
  initContainer:
    image:
      repository: swiss-armed-forces/cyber-command/cea/loom/alpine
    resources:
      requests:
        cpu: "0.05"
        memory: "50Mi"
      limits:
        cpu: "0.1"
        memory: "100Mi"

elasticsearch:
  replicaCount: 1
  shardsCount: null
  shardsReplicasCount: null
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/elasticsearch
  service:
    port: 9200
  pvc:
    storage: 50Gi
  ingress: *default-ingress-config
  readinessProbe:
    enabled: true
  livenessProbe:
    enabled: true
  resources:
    requests:
      cpu: "0.5"
      memory: "4Gi"
    limits:
      cpu: "4"
      memory: "8Gi"

elasticvue:
  enabled: true
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/elasticvue
  service:
    port: 8080
  ingress: *default-ingress-config
  resources:
    requests:
      cpu: "0.05"
      memory: "100Mi"
    limits:
      cpu: "0.5"
      memory: "500Mi"

fluentd:
  enabled: true
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/fluentd
  service:
    port: 24224
  resources:
    requests:
      cpu: "0.1"
      memory: "100Mi"
    limits:
      cpu: "0.5"
      memory: "500Mi"
  initContainer:
    image:
      repository: swiss-armed-forces/cyber-command/cea/loom/alpine
    resources:
      requests:
        cpu: "0.05"
        memory: "50Mi"
      limits:
        cpu: "0.1"
        memory: "100Mi"

grafana:
  enabled: true
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/grafana
  service:
    port: 3000
  ingress: *default-ingress-config
  readinessProbe:
    enabled: false
  livenessProbe:
    enabled: true
  resources:
    requests:
      cpu: "0.2"
      memory: "200Mi"
    limits:
      cpu: "2"
      memory: "2Gi"

translate:
  replicaCount: 1
  hpa:
    enabled: true
    maxReplicas: 2
    minReplicas: 1
    targetCPUUtilizationPercentage: 100
    targetMemoryUtilizationPercentage: 100
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/libretranslate
  env:
    ARGOS_DEVICE_TYPE: "auto"
  service:
    port: 5000
  ingress: *default-ingress-config
  readinessProbe:
    enabled: false
  livenessProbe:
    enabled: true
  resources:
    requests:
      cpu: "0.5"
      memory: "2Gi"
    limits:
      cpu: "4"
      memory: "5Gi"

minio:
  ## set kubernetes cluster domain where minio is running
  ##
  clusterDomain: cluster.local
  ## Set default image, imageTag, and imagePullPolicy. mode is used to indicate the
  ##
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/minio
    pullPolicy: IfNotPresent
  imagePullSecrets: []
  # - name: "image-pull-secret"
  ## Set default image, imageTag, and imagePullPolicy for the `mc` (the minio
  ## client used to create a default bucket).
  ##
  mcImage:
    repository: swiss-armed-forces/cyber-command/cea/loom/mc
    pullPolicy: IfNotPresent
  ## minio mode, i.e. standalone or distributed
  mode: standalone  ## other supported values are "standalone"

  ## Typically the deployment/statefulset includes checksums of secrets/config,
  ## So that when these change on a subsequent helm install, the deployment/statefulset
  ## is restarted. This can result in unnecessary restarts under GitOps tooling such as
  ## flux, so set to "true" to disable this behaviour.
  ignoreChartChecksums: false

  ## Additional arguments to pass to minio binary
  extraArgs: []
  # example for enabling FTP:
  #   - --ftp=\"address=:8021\"
  #   - --ftp=\"passive-port-range=10000-10010\"

  ## Additional volumes to minio container
  extraVolumes: []

  ## Additional volumeMounts to minio container
  extraVolumeMounts: []

  ## Additional sidecar containers
  extraContainers: []

  ## Internal port number for MinIO S3 API container
  ## Change service.port to change external port number
  minioAPIPort: '9000'

  ## Internal port number for MinIO Browser Console container
  ## Change consoleService.port to change external port number
  minioConsolePort: '9001'
  ## Update strategy for Deployments
  deploymentUpdate:
    type: RollingUpdate
    maxUnavailable: 0
    maxSurge: 100%
  ## Update strategy for StatefulSets
  statefulSetUpdate:
    updateStrategy: RollingUpdate
  ## Pod priority settings
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  ##
  priorityClassName: ''

  ## Pod runtime class name
  ## ref https://kubernetes.io/docs/concepts/containers/runtime-class/
  ##
  runtimeClassName: ''

  ## Set default rootUser, rootPassword
  ## rootUser and rootPassword is generated when not set
  ## Distributed MinIO ref: https://min.io/docs/minio/linux/operations/install-deploy-manage/deploy-minio-multi-node-multi-drive.html
  ##
  rootUser: minioadmin
  rootPassword: minioadmin

  ## Use existing Secret that store following variables:
  ##
  ## | Chart var             | .data.<key> in Secret    |
  ## |:----------------------|:-------------------------|
  ## | rootUser              | rootUser                 |
  ## | rootPassword          | rootPassword             |
  ##
  ## All mentioned variables will be ignored in values file.
  ## .data.rootUser and .data.rootPassword are mandatory,
  ## others depend on enabled status of corresponding sections.
  existingSecret: ''

  ## Directory on the MinIO pof
  certsPath: /etc/minio/certs/
  configPathmc: /etc/minio/mc/

  ## Path where PV would be mounted on the MinIO Pod
  mountPath: /export
  ## Override the root directory which the minio server should serve from.
  ## If left empty, it defaults to the value of {{ .Values.minio.mountPath }}
  ## If defined, it must be a sub-directory of the path specified in {{ .Values.minio.mountPath }}
  ##
  bucketRoot: ''

  # Number of drives attached to a node
  drivesPerNode: 1
  # Number of MinIO containers running
  replicas: 1
  # Number of expanded MinIO clusters
  pools: 1
  ## TLS Settings for MinIO
  tls:
    enabled: false
    ## Create a secret with private.key and public.crt files and pass that here.
    ## Ref: https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
    certSecret: ''
    publicCrt: public.crt
    privateKey: private.key
  ## Trusted Certificates Settings for MinIO.
  ## Ref: https://min.io/docs/minio/linux/operations/network-encryption.html#third-party-certificate-authorities
  ##
  ## Bundle multiple trusted certificates into one secret and pass that here.
  ## Ref: https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
  ##
  ## When using self-signed certificates, remember to include MinIO's own certificate in the bundle with key public.crt.
  ## If certSecret is left empty and tls is enabled, this chart installs the public certificate from .Values.minio.tls.certSecret.
  trustedCertsSecret: ''
  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: true
    annotations: {}

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    existingClaim: ''

    ## minio data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    ## Storage class of PV to bind. By default it looks for standard storage class.
    ## If the PV uses a different storage class, specify that here.
    storageClass: ''
    volumeName: ''
    accessMode: ReadWriteOnce
    size: 20Gi

    ## If subPath is set mount a sub folder of a volume instead of the root of the volume.
    ## This is especially handy for volume plugins that don't natively support sub mounting (like glusterfs).
    ##
    subPath: ''
  ## Expose the MinIO service to be accessed from outside the cluster (LoadBalancer service).
  ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##
  service:
    type: ClusterIP
    clusterIP:
    port: '9000'
    nodePort: 32000
    loadBalancerIP:
    externalIPs: []
    annotations: {}

    ## service.loadBalancerSourceRanges Addresses that are allowed when service is LoadBalancer
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ##
    # loadBalancerSourceRanges:
    #   - 10.10.10.0/24
    loadBalancerSourceRanges: []

    ## service.externalTrafficPolicy minio service external traffic policy
    ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    ##
    externalTrafficPolicy: Cluster
  ## Configure Ingress based on the documentation here: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress: *default-ingress-config
  consoleService:
    type: ClusterIP
    clusterIP:
    port: '9001'
    nodePort: 32001
    loadBalancerIP:
    externalIPs: []
    annotations: {}
    ## consoleService.loadBalancerSourceRanges Addresses that are allowed when service is LoadBalancer
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ##
    # loadBalancerSourceRanges:
    #   - 10.10.10.0/24
    loadBalancerSourceRanges: []

    ## servconsoleServiceice.externalTrafficPolicy minio service external traffic policy
    ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    ##
    externalTrafficPolicy: Cluster
  consoleIngress: *default-ingress-config
  ## Node labels for pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  tolerations: []
  affinity: {}
  topologySpreadConstraints: []
  ## Add stateful containers to have security context, if enabled MinIO will run as this
  ## user and group NOTE: securityContext is only enabled if persistence.enabled=true
  securityContext:
    enabled: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    fsGroupChangePolicy: OnRootMismatch
  containerSecurityContext:
    readOnlyRootFilesystem: false
  # Additational pod annotations
  podAnnotations: {}

  # Additional pod labels
  podLabels: {}
  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      cpu: "0.1"
      memory: "500Mi"
    limits:
      cpu: "1"
      memory: "2000Mi"
  ## List of policies to be created after minio install
  ##
  ## In addition to default policies [readonly|readwrite|writeonly|consoleAdmin|diagnostics]
  ## you can define additional policies with custom supported actions and resources
  policies: []
  ## writeexamplepolicy policy grants creation or deletion of buckets with name
  ## starting with example. In addition, grants objects write permissions on buckets starting with
  ## example.
  # - name: writeexamplepolicy
  #   statements:
  #     - effect: Allow  # this is the default
  #       resources:
  #         - 'arn:aws:s3:::example*/*'
  #       actions:
  #         - "s3:AbortMultipartUpload"
  #         - "s3:GetObject"
  #         - "s3:DeleteObject"
  #         - "s3:PutObject"
  #         - "s3:ListMultipartUploadParts"
  #     - resources:
  #         - 'arn:aws:s3:::example*'
  #       actions:
  #         - "s3:CreateBucket"
  #         - "s3:DeleteBucket"
  #         - "s3:GetBucketLocation"
  #         - "s3:ListBucket"
  #         - "s3:ListBucketMultipartUploads"
  ## readonlyexamplepolicy policy grants access to buckets with name starting with example.
  ## In addition, grants objects read permissions on buckets starting with example.
  # - name: readonlyexamplepolicy
  #   statements:
  #     - resources:
  #         - 'arn:aws:s3:::example*/*'
  #       actions:
  #         - "s3:GetObject"
  #     - resources:
  #         - 'arn:aws:s3:::example*'
  #       actions:
  #         - "s3:GetBucketLocation"
  #         - "s3:ListBucket"
  #         - "s3:ListBucketMultipartUploads"
  ## conditionsexample policy creates all access to example bucket with aws:username="johndoe" and source ip range 10.0.0.0/8 and 192.168.0.0/24 only
  # - name: conditionsexample
  #   statements:
  #     - resources:
  #       - 'arn:aws:s3:::example/*'
  #       actions:
  #       - 's3:*'
  #       conditions:
  #         - StringEquals: '"aws:username": "johndoe"'
  #         - IpAddress: |
  #             "aws:SourceIp": [
  #               "10.0.0.0/8",
  #               "192.168.0.0/24"
  #             ]
  #
  ## Additional Annotations for the Kubernetes Job makePolicyJob
  makePolicyJob:
    securityContext:
      enabled: false
      runAsUser: 1000
      runAsGroup: 1000
    resources: &default-minio-job-resources
      requests:
        cpu: "0.01"
        memory: "50Mi"
      limits:
        cpu: "0.1"
        memory: "100Mi"
    # Command to run after the main command on exit
    exitCommand: ''
  ## List of users to be created after minio install
  ##
  users: []
  ## Username, password and policy to be assigned to the user
  ## Default policies are [readonly|readwrite|writeonly|consoleAdmin|diagnostics]
  ## Add new policies as explained here:
  ## https://min.io/docs/minio/kubernetes/upstream/administration/identity-access-management.html#access-management
  ## NOTE: this will fail if LDAP is enabled in your MinIO deployment
  ## make sure to disable this if you are using LDAP.
  # - accessKey: console
  #   secretKey: console123
  #   policy: consoleAdmin
  ## Or you can refer to specific secret
  # - accessKey: externalSecret
  #   existingSecret: my-secret
  #   existingSecretKey: password
  #   policy: readonly
  ## Additional Annotations for the Kubernetes Job makeUserJob
  makeUserJob:
    securityContext:
      enabled: false
      runAsUser: 1000
      runAsGroup: 1000
    resources: *default-minio-job-resources
    # Command to run after the main command on exit
    exitCommand: ''
  ## List of service accounts to be created after minio install
  ##
  svcaccts:
    ## accessKey, secretKey and parent user to be assigned to the service accounts
    ## Add new service accounts as explained
    ## here https://min.io/docs/minio/kubernetes/upstream/administration/identity-access-management/minio-user-management.html#service-accounts
    # - accessKey: console-svcacct
    #   secretKey: console123
    #   user: console
    ## Or you can refer to specific secret
    # - accessKey: externalSecret
    #   existingSecret: my-secret
    #   existingSecretKey: password
    #   user: console
    ## You also can pass custom policy
    # - accessKey: console-svcacct
    #   secretKey: console123
    #   user: console
    #   policy:
    #     statements:
    #       - resources:
    #           - 'arn:aws:s3:::example*/*'
    #         actions:
    #           - "s3:AbortMultipartUpload"
    #           - "s3:GetObject"
    #           - "s3:DeleteObject"
    #           - "s3:PutObject"
    #           - "s3:ListMultipartUploadParts"
    - accessKey: MinIO-Intake-Key
      existingSecret: loom-minio-secret
      existingSecretKey: secretkey
      user: minioadmin
  makeServiceAccountJob:
    securityContext:
      enabled: false
      runAsUser: 1000
      runAsGroup: 1000
    resources: *default-minio-job-resources
    # Command to run after the main command on exit
    exitCommand: ''
  ## List of buckets to be created after minio install
  ##
  buckets:
    #  # Name of the bucket
    # - name: bucket1
    #  # Policy to be set on the
    #  # bucket [none|download|upload|public]
    #   policy: none
    #  # Purge if bucket exists already
    #   purge: false
    #  # set versioning for
    #  # bucket [true|false]
    #   versioning: false  # remove this key if you do not want versioning feature
    #  # set objectlocking for
    #  # bucket [true|false] NOTE: versioning is enabled by default if you use locking
    #   objectlocking: false
    # - name: bucket2
    #   policy: none
    #   purge: false
    #   versioning: true
    #  # set objectlocking for
    #  # bucket [true|false] NOTE: versioning is enabled by default if you use locking
    #   objectlocking: false
    - name: default
      policy: public
      purge: false
      versioning: false
      objectlocking: false
  ## Additional Annotations for the Kubernetes Job makeBucketJob
  makeBucketJob:
    securityContext:
      enabled: false
      runAsUser: 1000
      runAsGroup: 1000
    resources: *default-minio-job-resources
    # Command to run after the main command on exit
    exitCommand: ''
  ## List of command to run after minio install
  ## NOTE: the mc command TARGET is always "myminio"
  customCommands:
  ## for example:
  # - command: "admin policy attach myminio consoleAdmin --group='cn=ops,cn=groups,dc=example,dc=com'"
  ## Additional Annotations for the Kubernetes Job customCommandJob
  customCommandJob:
    securityContext:
      enabled: false
      runAsUser: 1000
      runAsGroup: 1000
    resources: *default-minio-job-resources
    ## Additional volumes to add to the post-job.
    extraVolumes: []
    ## for example:
    # - name: extra-policies
    #   configMap:
    #     name: my-extra-policies-cm
    ## Additional volumeMounts to add to the custom commands container when
    ## running the post-job.
    extraVolumeMounts: []
    ## for example:
    # - name: extra-policies
    #   mountPath: /mnt/extras/
    # Command to run after the main command on exit
    exitCommand: ''
  ## Merge jobs
  postJob:
    podAnnotations: {}
    annotations: {}
    securityContext:
      enabled: false
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
    nodeSelector: {}
    tolerations: []
    affinity: {}
  ## Use this field to add environment variables relevant to MinIO server. These fields will be passed on to MinIO container(s)
  ## when Chart is deployed
  environment:
  ## Please refer for comprehensive list:
  ## https://min.io/docs/minio/linux/reference/minio-server/minio-server.html
  ##
  ## MINIO_SUBNET_LICENSE: "License key obtained from https://subnet.min.io"
  ## MINIO_BROWSER: "off"
  ## The name of a secret in the same kubernetes namespace which contain secret values
  ## This can be useful for LDAP password, etc
  ## The key in the secret must be 'config.env'
  ##
  extraSecret:
  ## PodDisruptionBudget settings
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  ##
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  ## Specify the service account to use for the MinIO pods. If 'create' is set to 'false'
  ## and 'name' is left unspecified, the account 'default' will be used.
  serviceAccount:
    create: true
    ## The name of the service account to use. If 'create' is 'true', a service account with that name
    ## will be created.
    name: minio-sa

mongodb:
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/mongodb
  service:
    port: 27017
  ingress:
    enabled: false
  readinessProbe:
    enabled: false
  livenessProbe:
    enabled: true
  pvc:
    storage: 50Gi
  resources:
    requests:
      cpu: "0.2"
      memory: "1Gi"
    limits:
      cpu: "2"
      memory: "3Gi"
  express:
    enabled: true
    replicaCount: 1
    image:
      repository: swiss-armed-forces/cyber-command/cea/loom/mongo-express
    service:
      port: 8081
    ingress: *default-ingress-config
    resources:
      requests:
        cpu: "0.3"
        memory: "300Mi"
      limits:
        cpu: "0.5"
        memory: "500Mi"

rabbit:
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/rabbit
  service:
    port:
      amqp: 5672
      http: 15672
      prometheus: 15692
  pvc:
    storage: 30Gi
  ingress:
    http: *default-ingress-config
    amqp:
      enabled: false
  readinessProbe:
    enabled: false
  livenessProbe:
    enabled: true
  resources:
    requests:
      cpu: "0.4"
      memory: "1Gi"
    limits:
      cpu: "2"
      memory: "3Gi"

ollama: &ollama
  replicaCount: 1
  hpa:
    enabled: true
    maxReplicas: 2
    minReplicas: 1
    targetCPUUtilizationPercentage: 100
    targetMemoryUtilizationPercentage: 100
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/ollama
  service:
    port: 11434
  pvc:
    enabled: true
    storage: 30Gi
  ingress: *default-ingress-config
  readinessProbe:
    enabled: false
  livenessProbe:
    enabled: true
  resources:
    requests:
      cpu: "0.5"
      memory: "1.5Gi"
    limits:
      cpu: "10"
      memory: "10Gi"
  initContainer:
    resources:
      requests:
        cpu: "0.05"
        memory: "50Mi"
      limits:
        cpu: "0.1"
        memory: "100Mi"

ollama-tool: *ollama

open_webui:
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/open-webui
  env:
    ENV: "prod"
    WEBUI_AUTH: "false"
    ENABLE_SIGNUP: "false"
  service:
    port: 8080
  pvc:
    storage: 10Gi
  ingress: *default-ingress-config
  resources:
    requests:
      cpu: "0.1"
      memory: "200Mi"
    limits:
      cpu: "1.5"
      memory: "1500Mi"

dovecot:
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/dovecot
  service:
    port:
      imap: 143
  pvc:
    storage: 10Gi
  ingress:
    imaps: *default-ingress-config
    imap:
      enabled: false
      className: traefik
  resources:
    requests:
      cpu: "0.1"
      memory: "100Mi"
    limits:
      cpu: "0.5"
      memory: "500Mi"
  initContainer:
    image:
      repository: swiss-armed-forces/cyber-command/cea/loom/alpine
    resources:
      requests:
        cpu: "0.05"
        memory: "50Mi"
      limits:
        cpu: "0.1"
        memory: "100Mi"

roundcube:
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/roundcube
  service:
    port: 80
  ingress: *default-ingress-config
  resources:
    requests:
      cpu: "0.1"
      memory: "100Mi"
    limits:
      cpu: "0.5"
      memory: "500Mi"

prometheus:
  enabled: true
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/prometheus
  service:
    port: 9090
  pvc:
    storage: 10Gi
  ingress: *default-ingress-config
  readinessProbe:
    enabled: false
  livenessProbe:
    enabled: true
  resources:
    requests:
      cpu: "0.1"
      memory: "200Mi"
    limits:
      cpu: "1"
      memory: "1Gi"
  collectClusterMetrics: true
  initContainer:
    image:
      repository: swiss-armed-forces/cyber-command/cea/loom/alpine
    resources:
      requests:
        cpu: "0.05"
        memory: "50Mi"
      limits:
        cpu: "0.1"
        memory: "100Mi"

redis:
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/redis
  service:
    port: 6379
  ingress:
    enabled: false
  readinessProbe:
    enabled: false
  livenessProbe:
    enabled: true
  resources:
    requests:
      cpu: "0.2"
      memory: "500Mi"
    limits:
      cpu: "1.5"
      memory: "1500Mi"
  insight:
    enabled: true
    replicaCount: 1
    image:
      repository: swiss-armed-forces/cyber-command/cea/loom/redisinsight
    service:
      port: 5540
    ingress: *default-ingress-config
    resources:
      requests:
        cpu: "0.1"
        memory: "100Mi"
      limits:
        cpu: "0.3"
        memory: "300Mi"

rspamd:
  replicaCount: 1
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/rspamd
  worker:
    ingress: *default-ingress-config
    service:
      port: 11333
  resources:
    requests:
      cpu: "0.2"
      memory: "200Mi"
    limits:
      cpu: "1"
      memory: "1Gi"
  controller:
    ingress: *default-ingress-config
    service:
      port: 11334

tika:
  replicaCount: 1
  hpa:
    enabled: true
    maxReplicas: 10
    minReplicas: 1
    targetCPUUtilizationPercentage: 100
    targetMemoryUtilizationPercentage: 100
  image:
    repository: swiss-armed-forces/cyber-command/cea/loom/tika
  service:
    port: 9998
  ingress: *default-ingress-config
  readinessProbe:
    enabled: false
  livenessProbe:
    enabled: true
  resources:
    requests:
      cpu: "0.5"
      memory: "4Gi"
    limits:
      cpu: "4"
      memory: "6Gi"
