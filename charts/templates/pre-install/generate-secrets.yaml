{{- range .Values.preInstall.generateSecrets }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "app.fullname" $ }}-generate-secret-{{ .name }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        app: {{ include "app.name" $ }}-generate-secret-{{ .name }}
    spec:
      serviceAccountName: {{ include "app.fullname" $ }}-pre-install
      restartPolicy: Never
      containers:
        - name: create-secret
          image: {{ $.Values.image.registry }}/{{ $.Values.preInstall.image.repository }}:{{ default (default $.Chart.AppVersion $.Values.image.tag) $.Values.preInstall.image.tag }}
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          command:
            - bash
            - -c
            - |
              set -euo pipefail

              #
              # Vars
              #
              export NAMESPACE="{{ $.Release.Namespace }}"
              export SECRET_ENVIRONMENT="{{ $.Values.environment }}"
              export SECRET_NAME="{{ .name }}"
              export SECRET_SIZE="{{ .size }}"
              export SECRET_CHARS="{{ .chars }}"
              export SECRET_FIXED="{{ .fixed }}"

              #
              # Functions
              #
              get_secret_key(){
                  kubectl get secret "${SECRET_NAME}" \
                    --namespace="${NAMESPACE}" \
                    -o jsonpath="{.data.secretkey}" \
                    2>/dev/null \
                  | base64 -d
              }

              delete_secret_key(){
                  kubectl delete secret "${SECRET_NAME}" \
                    --namespace="${NAMESPACE}" \
                  &>/dev/null \
                  || true
              }

              is_using_fixed_secret() {
                [[ "$(get_secret_key || true)" == "${SECRET_FIXED}" ]]
              }

              use_fixed_secret() {
                [[ "${SECRET_ENVIRONMENT}" = "development" ]]
              }

              create_secret() {
                  local secret_key
                  local use_fixed_key

                  if is_using_fixed_secret; then
                    echo "[*] Deleting fixed secret: '${SECRET_NAME}'"
                    delete_secret_key
                  fi

                  if ! use_fixed_secret; then
                    use_fixed_key="false"
                    secret_key="$(</dev/urandom tr -dc "${SECRET_CHARS}" | head -c "${SECRET_SIZE}" || true)"
                  else
                    use_fixed_key="true"
                    secret_key="${SECRET_FIXED}"
                    delete_secret_key
                  fi

                  if get_secret_key &>/dev/null; then
                    echo "[*] Secret '${SECRET_NAME}' already exists"
                    return
                  fi

                  echo "[*] Create secret: '${SECRET_NAME}' (size: ${SECRET_SIZE}, fixed: ${use_fixed_key})"
                  kubectl create secret generic "${SECRET_NAME}" \
                      --namespace="${NAMESPACE}" \
                      --from-literal=secretkey="${secret_key}"
              }

              #
              # Main
              #
              create_secret
          {{- if $.Values.preInstall.resources }}
          resources: {{- toYaml $.Values.preInstall.resources | nindent 12 }}
          {{- end }}
{{- end }}