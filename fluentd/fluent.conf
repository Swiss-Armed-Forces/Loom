<source>
  @type tail
  path /var/log/pods/**/*.log
  pos_file /fluentd/log/pods.pos
  tag pod.logs.*
  <parse>
    @type json
    time_key time
    time_format %Y-%m-%dT%H:%M:%S.%LZ
    keep_time_key true
  </parse>
</source>

# Add filter to extract pod and namespace name from tag
<filter pod.logs.**>
  @type record_transformer
  enable_ruby true
  <record>
    namespace ${tag_parts[5].split('_')[0]}
    pod ${tag_parts[5].split('_')[1]}
  </record>
  remove_keys pod_info
</filter>

<match pod.logs.**>
  @type elasticsearch_data_stream
  host "#{ENV['FLUENT_ELASTICSEARCH_HOST'] || 'elasticsearch'}"
  port "#{ENV['FLUENT_ELASTICSEARCH_PORT'] || '9200'}"

  logstash_format true
  include_tag_key true
  data_stream_name docker-logs
  data_stream_template_name docker-logs-template
  data_stream_ilm_name "5d-hot-15-warm-log-op"
  data_stream_ilm_policy_overwrite true
  data_stream_ilm_policy {
    "policy": {
      "phases": {
        "hot": {
          "min_age": "0ms",
          "actions": {
            "rollover": {
              "max_primary_shard_size": "20gb",
              "max_age": "1d"
            },
            "set_priority": {
              "priority": 100
            }
          }
        },
        "warm": {
          "min_age": "5d",
          "actions": {
            "set_priority": {
              "priority": 50
            }
          }
        },
        "delete": {
          "min_age": "15d",
          "actions": {
            "delete": {
              "delete_searchable_snapshot": true
            }
          }
        }
      }
    }
  }
  fail_on_detecting_es_version_retry_exceed true
  fail_on_putting_template_retry_exceed true
  reconnect_on_error true
  reload_connections false
  reload_on_failure true
  <buffer>
    flush_thread_count "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_FLUSH_THREAD_COUNT'] || '8'}"
    flush_interval "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_FLUSH_INTERVAL'] || '5s'}"
    chunk_limit_size "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_CHUNK_LIMIT_SIZE'] || '2M'}"
    queue_limit_length "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_QUEUE_LIMIT_LENGTH'] || '32'}"
    retry_max_interval "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_RETRY_MAX_INTERVAL'] || '30'}"
    retry_forever true
  </buffer>
</match>
